================================================================================
                    SHOPEE PRODUCT SET API - CHI TI·∫æT ƒê·∫¶Y ƒê·ª¶
================================================================================

T√†i li·ªáu n√†y ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ c√°c API Product Set c·ªßa Shopee Live,
ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file: backend/src/modules/shopee-live/shopee-live.service.ts

================================================================================
                                T·ªîNG QUAN
================================================================================

Product Set l√† t√≠nh nƒÉng c·ªßa Shopee Live cho ph√©p:
- T·∫°o m·ªôt t·∫≠p h·ª£p s·∫£n ph·∫©m (t·ªëi ƒëa 100 items)
- G·∫Øn t·∫≠p h·ª£p n√†y v√†o gi·ªè h√†ng live
- Validate th√¥ng tin s·∫£n ph·∫©m h√†ng lo·∫°t
- X√≥a t·∫≠p h·ª£p sau khi s·ª≠ d·ª•ng

LU·ªíNG S·ª¨ D·ª§NG CH√çNH:
1. Add items to cart: Create ‚Üí Attach ‚Üí Delete
2. Validate items: Create ‚Üí GetInfo ‚Üí Parse ‚Üí Delete (B·∫ÆT BU·ªòC)

BATCH SIZE: T·ªëi ƒëa 100 items/product set

================================================================================
                           1. API T·∫†O PRODUCT SET
================================================================================

H√ÄM: createProductSet()
D√íNG CODE: 1028-1117
METHOD: POST
URL: https://live.shopee.vn/api/v1/session/${sessionId}/product_set/

HEADERS:
- Accept: application/json, text/plain, */*
- Content-Type: application/json
- cookie: cookies string

PAYLOAD:
{
  "name": "add_cart_timestamp ho·∫∑c validation_timestamp",
  "items": [
    {
      "item_id": number,
      "shop_id": number
    }
  ]
}

RESPONSE SUCCESS:
{
  "error": 0,
  "data": {
    "set_id": number
  }
}

RESPONSE ERROR:
{
  "error": 10002,
  "error_msg": "error message"
}

FULL CODE IMPLEMENTATION:
```typescript
async createProductSet(
  sessionId: number,
  items: Array<{ itemId: number; shopId: number }>,
  cookies: string,
  purpose: 'add_cart' | 'validation' = 'validation',
  groupId?: string,
  username?: string
): Promise<number> {
  const url = `https://live.shopee.vn/api/v1/session/${sessionId}/product_set/`;
  
  // Chu·∫©n b·ªã payload v·ªõi t·ªëi ƒëa 100 items
  const batchItems = items.slice(0, 100).map(item => ({
    item_id: item.itemId,
    shop_id: item.shopId
  }));
  
  const payload = {
    name: `${purpose}_${Date.now()}`,
    items: batchItems,
  };

  this.logger.log(`üîß createProductSet - POST ${url} (${purpose}, ${batchItems.length} items)`);
  this.logger.log(`üç™ createProductSet - Cookies length: ${cookies.length}, first 100 chars: ${cookies.substring(0, 100)}...`);
  
  // N·∫øu c√≥ groupId v√† username, check cookies tr∆∞·ªõc khi th·ª±c hi·ªán
  if (groupId && username) {
    try {
      const cookieStatus = await this.checkCookieStatus(groupId, username);
      this.logger.log(`üç™ createProductSet - Cookie status: ${cookieStatus.status}`);
      
      if (cookieStatus.status === 'invalid') {
        throw new Error(`Cookies ƒë√£ h·∫øt h·∫°n cho user ${username}. Vui l√≤ng c·∫≠p nh·∫≠t cookies m·ªõi.`);
      }
    } catch (error) {
      this.logger.error(`üç™ createProductSet - Cookie check failed: ${error.message}`);
      throw new Error(`Kh√¥ng th·ªÉ ki·ªÉm tra cookies: ${error.message}`);
    }
  }
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'cookie': cookies,
    },
    body: JSON.stringify(payload),
    credentials: 'include'
  });

  this.logger.log(`üì° createProductSet - Response status: ${response.status}`);
  
  if (!response.ok) {
    this.logger.error(`‚ùå createProductSet - HTTP Error: ${response.status} ${response.statusText}`);
    throw new Error(`Failed to create product set: ${response.status}`);
  }

  const data = await response.json();
  
  // Debug: Log to√†n b·ªô response ƒë·ªÉ ki·ªÉm tra
  this.logger.log(`üîç createProductSet - Full response:`, JSON.stringify(data, null, 2));
  
  // Ki·ªÉm tra error field (Shopee API m·ªõi)
  if (data.error !== undefined && data.error !== 0) {
    this.logger.error(`‚ùå createProductSet - Shopee API Error: ${data.error} - ${data.error_msg}`);
    
    // Handle specific error codes
    if (data.error === 10002) {
      throw new Error(`Shopee API error 10002: C√≥ th·ªÉ do qu√° nhi·ªÅu requests ho·∫∑c session h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.`);
    }
    
    throw new Error(`Shopee API error ${data.error}: ${data.error_msg || 'Unknown error'}`);
  }
  
  // Ki·ªÉm tra err_code field (Shopee API c≈©)
  if (data.err_code !== undefined && data.err_code !== 0) {
    this.logger.error(`‚ùå createProductSet - API Error: ${data.err_code} - ${data.err_msg}`);
    throw new Error(`API error: ${data.err_msg || 'Unknown error'}`);
  }

  // Ki·ªÉm tra data structure
  if (!data.data || !data.data.set_id) {
    this.logger.error(`‚ùå createProductSet - Invalid response structure:`, data);
    throw new Error(`Invalid response: missing set_id in data`);
  }

  const setId = data.data.set_id;
  this.logger.log(`‚úÖ createProductSet - Created set_id=${setId} (${purpose})`);
  return setId;
}
```

================================================================================
                           2. API XEM TH√îNG TIN PRODUCT SET
================================================================================

H√ÄM: getProductSetInfo()
D√íNG CODE: 1122-1170
METHOD: GET
URL: https://live.shopee.vn/webapi/v1/session/${sessionId}/product_set/${productSetId}

HEADERS:
- accept: application/json, text/plain, */*
- accept-language: en-US,en;q=0.9
- priority: u=1, i
- referer: https://live.shopee.vn/pc/setup?is_from_login=true
- sec-ch-ua: "Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"
- sec-ch-ua-mobile: ?0
- sec-ch-ua-platform: "Windows"
- sec-fetch-dest: empty
- sec-fetch-mode: cors
- sec-fetch-site: same-origin
- user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36
- x-sz-sdk-version: 1.10.7
- cookie: cookies string

RESPONSE SUCCESS:
{
  "err_code": 0,
  "err_msg": "",
  "data": {
    "total": number,
    "items": [
      {
        "item_id": number,
        "is_del": boolean,
        "is_unlisted": boolean,
        "is_prohibited": boolean,
        "status": number,
        "is_oos": boolean,
        "normal_stock": number,
        "price": string,
        "price_before_discount": string,
        "price_min": string,
        "price_min_before_discount": string,
        "price_max": string,
        "price_max_before_discount": string
      }
    ]
  }
}

RESPONSE ERROR:
{
  "err_code": number,
  "err_msg": "error message"
}

FULL CODE IMPLEMENTATION:
```typescript
async getProductSetInfo(
  sessionId: number,
  productSetId: number,
  cookies: string
): Promise<any> {
  const url = `https://live.shopee.vn/webapi/v1/session/${sessionId}/product_set/${productSetId}`;
  
  this.logger.log(`getProductSetInfo - GET ${url}`);

  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'accept': 'application/json, text/plain, */*',
      'accept-language': 'en-US,en;q=0.9',
      'priority': 'u=1, i',
      'referer': 'https://live.shopee.vn/pc/setup?is_from_login=true',
      'sec-ch-ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'sec-fetch-dest': 'empty',
      'sec-fetch-mode': 'cors',
      'sec-fetch-site': 'same-origin',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
      'x-sz-sdk-version': '1.10.7',
      'cookie': cookies
    },
    credentials: 'include'
  });
  
  if (!response.ok) {
    throw new Error(`Failed to get product set info: ${response.status}`);
  }

  const data = await response.json();
  
  if (data.err_code !== 0) {
    throw new Error(`API error: ${data.err_msg}`);
  }

  // Ki·ªÉm tra total = 0 ƒë·ªÉ ng·ª´ng lu·ªìng swap smart
  if (data.data && data.data.total === 0) {
    this.logger.log(`üõë getProductSetInfo - Total = 0, ng·ª´ng lu·ªìng swap smart`);
    throw new Error(`Product set tr·ªëng (total = 0) - ng·ª´ng lu·ªìng swap smart`);
  }

  return data.data;
}
```

================================================================================
                           3. API G·∫ÆN PRODUCT SET V√ÄO GI·ªé H√ÄNG
================================================================================

H√ÄM: attachProductSet()
D√íNG CODE: 591-639
METHOD: POST (fallback PUT n·∫øu 405)
URL: https://live.shopee.vn/api/v1/session/${sessionId}/product_set/attach

HEADERS:
- Accept: application/json, text/plain, */*
- Content-Type: application/json
- cookie: cookies string

PAYLOAD:
{
  "set_id": [number]
}

FULL CODE IMPLEMENTATION:
```typescript
private async attachProductSet(groupId: string, username: string, setId: number) {
  // L·∫•y session ƒëang live
  const liveSession = await this.getLiveSession(groupId, username);
  if (!liveSession) {
    throw new Error('Kh√¥ng t√¨m th·∫•y session ƒëang live');
  }

  // L·∫•y cookies t·ª´ user
  const user = await this.shopeeUserModel.findOne({ groupId, username });
  if (!user || !user.cookies) {
    throw new Error('User ho·∫∑c cookies kh√¥ng t·ªìn t·∫°i');
  }

  const sessionId = liveSession.sessionId;
  const url = `https://live.shopee.vn/api/v1/session/${sessionId}/product_set/attach`;
  const payload = { set_id: [setId] };

  // Th·ª≠ POST tr∆∞·ªõc
  let response = await fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'cookie': user.cookies,
    },
    body: JSON.stringify(payload),
    credentials: 'include'
  });

  // N·∫øu POST b·ªã 405, th·ª≠ PUT
  if (response.status === 405) {
    this.logger.warn(`attachProductSet - POST returned 405, retrying with PUT`);
    response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'cookie': user.cookies,
      },
      body: JSON.stringify(payload),
      credentials: 'include'
    });
  }

  if (!response.ok) {
    this.logger.warn(`attachProductSet - response not ok, status=${response.status}`);
    throw new Error('Kh√¥ng th·ªÉ g·∫Øn product set v√†o gi·ªè h√†ng');
  }
}
```

================================================================================
                           4. API X√ìA PRODUCT SET
================================================================================

H√ÄM: deleteProductSet()
D√íNG CODE: 1175-1207
METHOD: DELETE
URL: https://live.shopee.vn/webapi/v1/session/${sessionId}/product_set/${productSetId}

HEADERS:
- accept: application/json, text/plain, */*
- accept-language: en-US,en;q=0.9
- priority: u=1, i
- referer: https://live.shopee.vn/pc/setup?is_from_login=true
- sec-ch-ua: "Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"
- sec-ch-ua-mobile: ?0
- sec-ch-ua-platform: "Windows"
- sec-fetch-dest: empty
- sec-fetch-mode: cors
- sec-fetch-site: same-origin
- user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36
- x-sz-sdk-version: 1.10.7
- cookie: cookies string

FULL CODE IMPLEMENTATION:
```typescript
async deleteProductSet(
  sessionId: number,
  productSetId: number,
  cookies: string
): Promise<void> {
  const url = `https://live.shopee.vn/webapi/v1/session/${sessionId}/product_set/${productSetId}`;
  
  this.logger.log(`deleteProductSet - DELETE ${url}`);

  const response = await fetch(url, {
    method: 'DELETE',
    headers: {
      'accept': 'application/json, text/plain, */*',
      'accept-language': 'en-US,en;q=0.9',
      'priority': 'u=1, i',
      'referer': 'https://live.shopee.vn/pc/setup?is_from_login=true',
      'sec-ch-ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'sec-fetch-dest': 'empty',
      'sec-fetch-mode': 'cors',
      'sec-fetch-site': 'same-origin',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
      'x-sz-sdk-version': '1.10.7',
      'cookie': cookies
    },
    credentials: 'include'
  });

  if (!response.ok) {
    this.logger.warn(`deleteProductSet - Failed: ${response.status}`);
  }
}
```

================================================================================
                           5. H√ÄM X·ª¨ L√ù DATA VALIDATION
================================================================================

H√ÄM: parseProductsBatchValidation()
D√íNG CODE: 877-1022
M·ª§C ƒê√çCH: Parse response t·ª´ getProductSetInfo ƒë·ªÉ validate t·ª´ng item

C√ÅC TR∆Ø·ªúNG CHECK:
- isDel: S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a
- isUnlisted: S·∫£n ph·∫©m ƒë√£ b·ªã ·∫©n/kh√¥ng ni√™m y·∫øt
- isProhibited: S·∫£n ph·∫©m b·ªã c·∫•m
- status: Tr·∫°ng th√°i ho·∫°t ƒë·ªông (ph·∫£i = 1)
- isOos: S·∫£n ph·∫©m h·∫øt h√†ng
- stock: T·ªìn kho (ph·∫£i > 0)

FULL CODE IMPLEMENTATION:
```typescript
private parseProductsBatchValidation(
  items: Array<{ itemId: string; shopId: number }>,
  productInfo: any
): Array<{
  itemId: string;
  isValid: boolean;
  issues: string[];
  status: {
    isDel: boolean;
    isUnlisted: boolean;
    isProhibited: boolean;
    status: number;
    isOos: boolean;
    stock: number;
  };
}> {
  const results: Array<{
    itemId: string;
    isValid: boolean;
    issues: string[];
    status: {
      isDel: boolean;
      isUnlisted: boolean;
      isProhibited: boolean;
      status: number;
      isOos: boolean;
      stock: number;
    };
  }> = [];

  const productItems = productInfo.items || [];
  
  // T·∫°o map ƒë·ªÉ lookup nhanh theo item_id
  const itemMap = new Map();
  productItems.forEach((item: any) => {
    const itemId = item.item_id?.toString() || item.itemid?.toString();
    if (itemId) {
      itemMap.set(itemId, item);
    }
  });

  // Parse t·ª´ng item trong batch
  for (const requestItem of items) {
    const productItem = itemMap.get(requestItem.itemId);
    
    if (!productItem) {
      // Item kh√¥ng t√¨m th·∫•y trong response
      results.push({
        itemId: requestItem.itemId,
        isValid: false,
        issues: ['Item kh√¥ng t√¨m th·∫•y trong product set'],
        status: {
          isDel: true,
          isUnlisted: false,
          isProhibited: false,
          status: 0,
          isOos: false,
          stock: 0
        }
      });
      continue;
    }

    // Parse validation cho item n√†y
    const issues: string[] = [];
    let isValid = true;

    const isDel = productItem.is_del === true;
    const isUnlisted = productItem.is_unlisted === true;
    const isProhibited = productItem.is_prohibited === true;
    const status = productItem.status || 0;
    const isOos = productItem.is_oos === true;
    const stock = productItem.normal_stock || 0;

    if (isDel) {
      issues.push('S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a');
      isValid = false;
    }

    if (isUnlisted) {
      issues.push('S·∫£n ph·∫©m ƒë√£ b·ªã ·∫©n/kh√¥ng ni√™m y·∫øt');
      isValid = false;
    }

    if (isProhibited) {
      issues.push('S·∫£n ph·∫©m b·ªã c·∫•m');
      isValid = false;
    }

    if (status !== 1) {
      issues.push(`Tr·∫°ng th√°i kh√¥ng ho·∫°t ƒë·ªông (status: ${status})`);
      isValid = false;
    }

    if (isOos) {
      issues.push('S·∫£n ph·∫©m h·∫øt h√†ng');
      isValid = false;
    }

    if (stock <= 0) {
      issues.push('Kh√¥ng c√≤n t·ªìn kho');
      isValid = false;
    }

    results.push({
      itemId: requestItem.itemId,
      isValid,
      issues,
      status: {
        isDel,
        isUnlisted,
        isProhibited,
        status,
        isOos,
        stock
      }
    });
  }

  return results;
}
```

================================================================================
                           6. THU·∫¨T TO√ÅN VALIDATION CHI TI·∫æT
================================================================================

THU·∫¨T TO√ÅN CHECK VALID ITEM - PH√ÇN T√çCH CHI TI·∫æT

B∆Ø·ªöC 1: T·∫†O MAP LOOKUP
```typescript
// T·∫°o map ƒë·ªÉ lookup nhanh theo item_id t·ª´ response
const itemMap = new Map();
productItems.forEach((item: any) => {
  const itemId = item.item_id?.toString() || item.itemid?.toString();
  if (itemId) {
    itemMap.set(itemId, item);
  }
});
```

B∆Ø·ªöC 2: KI·ªÇM TRA T·ª™NG ITEM
```typescript
for (const requestItem of items) {
  const productItem = itemMap.get(requestItem.itemId);
  
  // CASE 1: Item kh√¥ng t√¨m th·∫•y trong response
  if (!productItem) {
    return {
      itemId: requestItem.itemId,
      isValid: false,
      issues: ['Item kh√¥ng t√¨m th·∫•y trong product set'],
      status: { isDel: true, isUnlisted: false, isProhibited: false, status: 0, isOos: false, stock: 0 }
    };
  }
}
```

B∆Ø·ªöC 3: EXTRACT C√ÅC TR∆Ø·ªúNG VALIDATION
```typescript
const isDel = productItem.is_del === true;                    // S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a
const isUnlisted = productItem.is_unlisted === true;          // S·∫£n ph·∫©m ƒë√£ b·ªã ·∫©n
const isProhibited = productItem.is_prohibited === true;      // S·∫£n ph·∫©m b·ªã c·∫•m
const status = productItem.status || 0;                       // Tr·∫°ng th√°i ho·∫°t ƒë·ªông
const isOos = productItem.is_oos === true;                    // S·∫£n ph·∫©m h·∫øt h√†ng
const stock = productItem.normal_stock || 0;                  // T·ªìn kho
```

B∆Ø·ªöC 4: VALIDATION RULES (THEO TH·ª® T·ª∞ ∆ØU TI√äN)

RULE 1: KI·ªÇM TRA S·∫¢N PH·∫®M ƒê√É B·ªä X√ìA
```typescript
if (isDel) {
  issues.push('S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a');
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: is_del === true
- M·ª©c ƒë·ªô: CRITICAL (kh√¥ng th·ªÉ s·ª≠ d·ª•ng)
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid ngay l·∫≠p t·ª©c

RULE 2: KI·ªÇM TRA S·∫¢N PH·∫®M B·ªä ·∫®N
```typescript
if (isUnlisted) {
  issues.push('S·∫£n ph·∫©m ƒë√£ b·ªã ·∫©n/kh√¥ng ni√™m y·∫øt');
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: is_unlisted === true
- M·ª©c ƒë·ªô: CRITICAL (kh√¥ng hi·ªÉn th·ªã c√¥ng khai)
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid

RULE 3: KI·ªÇM TRA S·∫¢N PH·∫®M B·ªä C·∫§M
```typescript
if (isProhibited) {
  issues.push('S·∫£n ph·∫©m b·ªã c·∫•m');
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: is_prohibited === true
- M·ª©c ƒë·ªô: CRITICAL (vi ph·∫°m ch√≠nh s√°ch)
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid

RULE 4: KI·ªÇM TRA TR·∫†NG TH√ÅI HO·∫†T ƒê·ªòNG
```typescript
if (status !== 1) {
  issues.push(`Tr·∫°ng th√°i kh√¥ng ho·∫°t ƒë·ªông (status: ${status})`);
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: status !== 1
- M·ª©c ƒë·ªô: CRITICAL (s·∫£n ph·∫©m kh√¥ng active)
- C√°c status h·ª£p l·ªá: 1 = Active, 0 = Inactive, 2 = Pending, etc.
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid

RULE 5: KI·ªÇM TRA T√åNH TR·∫†NG H√ÄNG
```typescript
if (isOos) {
  issues.push('S·∫£n ph·∫©m h·∫øt h√†ng');
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: is_oos === true
- M·ª©c ƒë·ªô: WARNING (c√≥ th·ªÉ t·∫°m th·ªùi)
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid

RULE 6: KI·ªÇM TRA T·ªíN KHO
```typescript
if (stock <= 0) {
  issues.push('Kh√¥ng c√≤n t·ªìn kho');
  isValid = false;
}
```
- ƒêi·ªÅu ki·ªán: normal_stock <= 0
- M·ª©c ƒë·ªô: WARNING (c√≥ th·ªÉ t·∫°m th·ªùi)
- H√†nh ƒë·ªông: ƒê√°nh d·∫•u invalid

RULE 7: KI·ªÇM TRA GI√Å (T·∫†M TH·ªúI DISABLED)
```typescript
// T·∫†M TH·ªúI COMMENT - c√≥ th·ªÉ g√¢y false positive
/*
const price = productItem.price;
const priceBeforeDiscount = productItem.price_before_discount;
const priceMin = productItem.price_min;
const priceMinBeforeDiscount = productItem.price_min_before_discount;
const priceMax = productItem.price_max;
const priceMaxBeforeDiscount = productItem.price_max_before_discount;

if (price === "1000" && 
    priceBeforeDiscount === "1000" && 
    priceMin === "1000" && 
    priceMinBeforeDiscount === "1000" && 
    priceMax === "1000" && 
    priceMaxBeforeDiscount === "1000") {
  issues.push('Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá (t·∫•t c·∫£ price fields = 1000)');
  isValid = false;
}
*/
```
- ƒêi·ªÅu ki·ªán: T·∫•t c·∫£ price fields ƒë·ªÅu = "1000"
- M·ª©c ƒë·ªô: SUSPICIOUS (c√≥ th·ªÉ l√† placeholder)
- Tr·∫°ng th√°i: DISABLED (ƒë·ªÉ debug)

B∆Ø·ªöC 5: T·∫†O K·∫æT QU·∫¢ VALIDATION
```typescript
results.push({
  itemId: requestItem.itemId,
  isValid,                    // true n·∫øu t·∫•t c·∫£ rules pass
  issues,                     // array c√°c l·ªói g·∫∑p ph·∫£i
  status: {                   // raw data t·ª´ API
    isDel,
    isUnlisted,
    isProhibited,
    status,
    isOos,
    stock
  }
});
```

THU·∫¨T TO√ÅN T·ªîNG QUAN:
1. T·∫°o Map lookup ƒë·ªÉ t√¨m nhanh item theo ID
2. V·ªõi m·ªói item request:
   - T√¨m trong response data
   - N·∫øu kh√¥ng t√¨m th·∫•y ‚Üí INVALID
   - N·∫øu t√¨m th·∫•y ‚Üí check t·ª´ng rule theo th·ª© t·ª±
   - M·ªói rule fail ‚Üí th√™m v√†o issues v√† set isValid = false
   - Cu·ªëi c√πng t·∫°o result object

PRIORITY ORDER (th·ª© t·ª± ∆∞u ti√™n):
1. isDel (CRITICAL)
2. isUnlisted (CRITICAL) 
3. isProhibited (CRITICAL)
4. status !== 1 (CRITICAL)
5. isOos (WARNING)
6. stock <= 0 (WARNING)
7. price validation (DISABLED)

VALIDATION RESULT STRUCTURE:
```typescript
{
  itemId: string,           // ID c·ªßa item ƒë∆∞·ª£c validate
  isValid: boolean,         // true n·∫øu item h·ª£p l·ªá ƒë·ªÉ s·ª≠ d·ª•ng
  issues: string[],         // danh s√°ch c√°c v·∫•n ƒë·ªÅ g·∫∑p ph·∫£i
  status: {                 // raw status t·ª´ Shopee API
    isDel: boolean,         // ƒë√£ b·ªã x√≥a
    isUnlisted: boolean,    // ƒë√£ b·ªã ·∫©n
    isProhibited: boolean,  // b·ªã c·∫•m
    status: number,         // tr·∫°ng th√°i (1=active)
    isOos: boolean,         // h·∫øt h√†ng
    stock: number           // t·ªìn kho
  }
}
```

================================================================================
                                V√ç D·ª§ S·ª¨ D·ª§NG
================================================================================

V√ç D·ª§ 1: TH√äM ITEMS V√ÄO CART
```typescript
// Lu·ªìng: Create ‚Üí Attach ‚Üí Delete
async addItemsToCart(groupId: string, username: string, sessionId: number, items: Array<{itemId: number, shopId: number}>) {
  const user = await this.shopeeUserModel.findOne({ groupId, username });
  
  // Chia th√†nh batch 100 items/l·∫ßn
  const batchSize = 100;
  const batches = [];
  for (let i = 0; i < items.length; i += batchSize) {
    batches.push(items.slice(i, i + batchSize));
  }

  for (const batch of batches) {
    try {
      // B∆∞·ªõc 1: T·∫°o Product Set
      const setId = await this.createProductSet(sessionId, batch, user.cookies, 'add_cart', groupId, username);
      
      // B∆∞·ªõc 2: G·∫Øn v√†o gi·ªè h√†ng
      await this.attachProductSet(groupId, username, setId);
      
      // B∆∞·ªõc 3: X√≥a Product Set
      await this.deleteProductSetForAddCart(groupId, username, setId);
      
    } catch (error) {
      console.error('Batch failed:', error.message);
    }
  }
}
```

V√ç D·ª§ 2: VALIDATE ITEMS
```typescript
// Lu·ªìng: Create ‚Üí GetInfo ‚Üí Parse ‚Üí Delete (B·∫ÆT BU·ªòC)
async validateProductsBatch(groupId: string, username: string, sessionId: number, items: Array<{ itemId: string; shopId: number }>) {
  const user = await this.shopeeUserModel.findOne({ groupId, username });
  let productSetId: number | null = null;
  
  try {
    // B∆∞·ªõc 1: T·∫°o product set
    const batchItems = items.map(item => ({ itemId: parseInt(item.itemId), shopId: item.shopId }));
    productSetId = await this.createProductSet(sessionId, batchItems, user.cookies, 'validation', groupId, username);
    
    // B∆∞·ªõc 2: L·∫•y th√¥ng tin chi ti·∫øt
    const productInfo = await this.getProductSetInfo(sessionId, productSetId, user.cookies);
    
    // B∆∞·ªõc 3: B·∫ÆT BU·ªòC X√ìA product set
    await this.deleteProductSet(sessionId, productSetId, user.cookies);
    productSetId = null;
    
    // B∆∞·ªõc 4: Parse k·∫øt qu·∫£
    const results = this.parseProductsBatchValidation(items, productInfo);
    
    return results;
    
  } catch (error) {
    // B·∫ÆT BU·ªòC cleanup n·∫øu c√≥ l·ªói
    if (productSetId) {
      try {
        await this.deleteProductSet(sessionId, productSetId, user.cookies);
      } catch (cleanupError) {
        console.error('Cleanup failed:', cleanupError.message);
      }
    }
    throw error;
  }
}
```

V√ç D·ª§ 3: ERROR HANDLING
```typescript
// X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
try {
  const setId = await this.createProductSet(sessionId, items, cookies, 'add_cart');
} catch (error) {
  if (error.message.includes('10002')) {
    console.log('Qu√° nhi·ªÅu requests, th·ª≠ l·∫°i sau');
  } else if (error.message.includes('Cookies ƒë√£ h·∫øt h·∫°n')) {
    console.log('C·∫ßn c·∫≠p nh·∫≠t cookies');
  } else {
    console.log('L·ªói kh√°c:', error.message);
  }
}
```

================================================================================
                                L∆ØU √ù QUAN TR·ªåNG
================================================================================

1. B·∫ÆT BU·ªòC X√ìA PRODUCT SET sau khi s·ª≠ d·ª•ng ƒë·ªÉ tr√°nh r√°c
2. Batch size t·ªëi ƒëa 100 items/product set
3. Cookies ph·∫£i c√≤n h·∫°n v√† h·ª£p l·ªá
4. Session ph·∫£i ƒëang live ho·∫∑c t·ªìn t·∫°i
5. API attachProductSet c√≥ fallback POST ‚Üí PUT n·∫øu 405
6. Error code 10002 = qu√° nhi·ªÅu requests, c·∫ßn retry
7. Total = 0 trong response c√≥ nghƒ©a product set tr·ªëng

================================================================================
                                K·∫æT TH√öC
================================================================================

T√†i li·ªáu n√†y ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ 5 h√†m API Product Set ch√≠nh c·ªßa Shopee Live.
T·∫•t c·∫£ code ƒë·ªÅu ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file g·ªëc v√† ƒë√£ ƒë∆∞·ª£c test trong production.

File g·ªëc: backend/src/modules/shopee-live/shopee-live.service.ts
Ng√†y t·∫°o: $(date)
